!-----------------------------------------------------------------------
!BOP
!
! !MODULE: ice_flato --- flato thermodynamic ice model
! \label{sec:ice_flato}
!
! !INTERFACE:
   module ice_flato
!
! !DESCRIPTION:
!  The model consists of a zero heat capacity snow layer overlying two equally
!  thick sea ice layers. The upper ice layer has a variable heat capacity to
!  represent brine pockets. The lower ice layer has a fixed heat capacity.
!  The prognostic variables are hs (snow layer thickness), hi (ice layer
!  thickness), T1 and T2, the upper and lower ice layer temperatures located
!  at the midpoints of the layers. The ice model performs two functions, the
!  first is to calculate the ice temperature and the second is to calculate
!  changes in the thickness of ice and snow.
!
!------------------------------------------------------------------------------!
!                                                                              !
!                       THREE-LAYER VERTICAL THERMODYNAMICS                    !
!                                                                              !
! Reference:  M. Winton flato, 2000: "A reformulated three-layer sea ice model",     !
!            Journal of Atmospheric and Oceanic Technology, 17, 525-531.       !
!                                                                              !
!                                                                              !
!        -> +---------+ <- Ts - diagnostic surface temperature ( <= 0C )       !
!       /   |         |                                                        !
!     hs    |  snow   | <- 0-heat capacity snow layer                          !
!       \   |         |                                                        !
!        => +---------+                                                        !
!       /   |         |                                                        !
!      /    |         | <- T1 - upper 1/2 ice temperature; this layer has      !
!     /     |         |         a variable (T/S dependent) heat capacity       !
!   hi      |...ice...|                                                        !
!     \     |         |                                                        !
!      \    |         | <- T2 - lower 1/2 ice temp. (fixed heat capacity)      !
!       \   |         |                                                        !
!        -> +---------+ <- Tf - base of ice fixed at seawater freezing temp.   !
!                                                                              !
!                                                     Mike Winton flato (mw@gfdl.gov)!
!------------------------------------------------------------------------------!
!  Note: in this implementation the equations are multiplied by hi to improve
!  thin ice accuracy
!
!  The code is based on the open source sea ice model included in the Modular
!  Ocean Model.
!
! !USES:
   use ice_variables
   IMPLICIT NONE
!
!  default: all is private.
   private
!
! !PUBLIC MEMBER FUNCTIONS:
!KB   public                              :: init_ice_flato
   public                              :: do_ice_flato
!KB   public                              :: ice_optics
!
! !PUBLIC DATA MEMBERS:
   public :: rhos, rhoi, CW, DW, LI, my, Si, Tfi, Kmelt
!
! !DEFINED PARAMETERS:
!  properties of ice, snow, and seawater (NCAR CSM values)
!  thermal conductivity of snow [W/(mK)]
   REALTYPE, parameter       :: Ks=0.31
!  density of snow [kg/(m^3)]
   REALTYPE, parameter       :: rhos=330.0
!  thermal conductivity of ice [W/(mK)]
!  a smaller value should be more appropriate
!KB   REALTYPE, parameter       :: Ki=2.03
!  density of ice [kg/(m^3)]
   REALTYPE, parameter       :: rhoi=905.0
!  heat cap. of fresh ice [J/(kg K)]
   REALTYPE, parameter       :: Ci=2100.0
!  salinity of sea ice
   REALTYPE, parameter       :: Si=1.0
!  relates freezing temp. to salinity
   REALTYPE, parameter       :: my=0.0545
!  sea ice freezing temp. = -mu*salinity
   REALTYPE, parameter       :: Tfi=-my*Si
!  heat capacity of seawater?
!KB   REALTYPE, parameter       :: CW=4.2e3
!  density of water for waterline [kg/(m^3)]
   REALTYPE, parameter       :: DW=1025.0
!  density of freshwater [kg/(m^3)]
   REALTYPE, parameter       :: DFW=1000.0
!  latent heat of fusion [J/(kg-ice)]
   REALTYPE, parameter       :: Li=334.e3
!  albedos are from CSIM4 assumming 0.53 visible and 0.47 near-ir insolation
!  albedo of snow (not melting)
   REALTYPE                  :: ALB_SNO=0.85
!  albedo of ice (not melting)
   REALTYPE                  :: ALB_ICE=0.5826
!  ice surface penetrating solar fraction
   REALTYPE                  :: PEN_ICE=0.3
!  ice optical depth [m]
   REALTYPE                  :: OPT_DEP_ICE=0.67
!  ice optical extinction [1/m]
   REALTYPE                  :: OPT_EXT_ICE=1.5
!  snow optical extinction  [1/m]
   REALTYPE                  :: OPT_EXT_SNOW=15.0
!  melt albedos scaled in below melting T
   REALTYPE                  :: T_RANGE_MELT=_ONE_
!  hi/hs lower limit for temp. calc.
   REALTYPE                  :: H_LO_LIM=0.1
!  ocean/ice heat flux constant
   REALTYPE                  :: Kmelt=6e-5*4e6
!
! !REVISION HISTORY:
!  Original author: Michael Winton flato
!  Author(s): Adolf Stips, Jesper Larsen and Karsten Bolding
!
!-----------------------------------------------------------------------

   contains

!-----------------------------------------------------------------------
!BOP
!
! !ROUTINE: Calculate ice thermodynamics \label{sec:do_ice_flato}
!
! !INTERFACE:
   subroutine do_ice_flato(ice_cover,dz,dt,Tw,S,Ta,precip,Qsw,Qfluxes)
!KB   subroutine do_ice_flato(dt,h,S,sst,T,hs,hi,Ti,surface_melt,bottom_melt)
!
! !DESCRIPTION:
!  This subroutine updates the sea ice prognostic variables. The updated
!  variables are upper ice layer temperature (T1), lower ice layer temperature
!  (T2), snow thickness (hs), and ice thickness (hi).
!
!  The ice model performs this in two steps. First the temperatures are updated
!  and secondly the changes in ice and snow thickness are calculated.
!
!  Any surplus energy that is not used for melting is returned in tmelt and
!  bmelt.
!
!  Evaporation and bottom ablation formation are not included in
!  this version of the model. Furthermore we do not keep an explicit water
!  and salt budget for the sea ice and how that affects the water and salt
!  budgets in the ocean.
!
! !USES:
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in)    :: dz,dt,Ta,S,precip,Qsw
!
! !INPUT/OUTPUT PARAMETERS:
   integer, intent(inout)  :: ice_cover
   REALTYPE, intent(inout) :: Tw
!
   interface
      subroutine Qfluxes(T,qh,qe,qb)
         REALTYPE, intent(in)                 :: T
         REALTYPE, intent(out)                :: qh,qe,qb
      end subroutine
   end interface
!
! !REVISION HISTORY:
!  Original author(s): Karsten Bolding
!
! !OUTPUT PARAMETERS:
!
! !LOCAL VARIABLES:
   REALTYPE        :: Tf    ! seawater freezing temperature (deg-C)
   REALTYPE        :: Fb    ! heat flux from ocean to ice bottom (W/m^2)
   REALTYPE        :: I     ! solar absorbed by upper ice (W/m^2)
   REALTYPE        :: evap  ! evaporation of ice (m/s)
   REALTYPE        :: snow
   REALTYPE        :: trn, pen
   REALTYPE        :: dtemp
   REALTYPE        :: rho_0 = 1025.
   logical         :: has_ice
!
   REALTYPE, pointer :: Ts,T1,T2,hi,hs
   REALTYPE        :: A, B, dts=0.01
   REALTYPE        :: qh,qe,qb
!
   REALTYPE        ::  K12,K32
   REALTYPE        ::  A1,B1,C1
   REALTYPE        ::  Ms,Mb
   REALTYPE        ::  h1,h2
   REALTYPE, pointer ::  dh1,dh2
   REALTYPE        ::  dhs
   REALTYPE        ::  T1new,T2new
!
! !LOCAL PARAMETERS:
   REALTYPE        :: kelvin=273.16 ! absolute zero
!EOP
!-----------------------------------------------------------------------
!BOC
   LEVEL0 'do_ice_flato'
#if 0
   if (sum(hi) .gt. _ZERO_) then
      has_ice = .true.
   else
      has_ice = .false.
   endif
#endif

!  Calculate seawater freezing temperature
   Tf = my*S
   Ts => Tice_surface
   T1 => Tice(1)
   T2 => Tice(2)
   hs => Hsnow
   hi => Hice
   dh1 => dHis
   dh2 => dHib
hi=1.29
   T1 = -3.
   T2 = -2.
   h1 = hi/2
   h2 = h1
STDERR 'H ',h1,h2,hi

   call Qfluxes(Ts,Qh,qh,qb)
   A = qh+qe+qb ! (7-)
   call Qfluxes(Ts+dts,qh,qh,qb)
   B = qh+qe+qb
   B = (B-A)/dts ! (8)
   A = A - Ts*B ! (-7)

STDERR 'AB ',A,B
STDERR 'T1 ',T1
T1 = -_ONE_

!  compute upper ice and surface temperatures
!KB      K12 = 4*K_ice*Ks/(Ks+4*K_ice*hs/hie) ! (5)
   K12 = 4*K_ice*Ks/(Ks*hi+4*K_ice*hs) ! (5)
   K32 = 2*K_ice/hi
!KB   hi2 = hie*hie
!
STDERR 'K12 ',K12
STDERR 'K32 ',K32
   A1 = rho_ice*hi/(2*dt)*Ci & ! (16)
       +K32*(4*dt*K32+rho_ice*hi*Ci)/(6*dt*K32+rho_ice*hi*Ci) &
       +K12*B/(K12+B)

   B1 =-rho_ice*hi/(2*dt)*(Ci*T1-L_ice*my*S/T1) & ! (17)
       -Qsw & !KB
       -K32*(4*dt*K32*Tf+rho_ice*hi*Ci*T2)/(6*dt*K32+rho_ice*hi*Ci) &
       +A*K12/(K12+B)

   C1 = -rho_ice*hi/(2*dt)*L_ice*my*S ! (18)
STDERR A1,B1,C1

#if 0
   A1 = A10+K12*B*hi/(K12+B*hie)
   B1 = B10+A*K12*hi/(K12+B*hie)
#endif
   T1new = -(sqrt(B1*B1-4*A1*C1)+B1)/(2*A1) ! (21)

   if (T1new .gt. my*S) then
      A1 = rho_ice*hi/(2*dt)*Ci & ! (16)
          +K32*(4*dt*K32+rho_ice*hi*Ci)/(6*dt*K32+rho_ice*hi*Ci) &
          +K12

      B1 =-rho_ice*hi/(2*dt)*(Ci*T1-L_ice*my*S/T1) & ! (17)
          -Qsw & !KB
          -K32*(4*dt*K32*Tf+rho_ice*hi*Ci*T2)/(6*dt*K32+rho_ice*hi*Ci) &
          +K12*Ts

      T1new = -(sqrt(B1*B1-4*A1*C1)+B1)/(2*A1) ! (21)
   end if

   T1 = T1new

   T2 = (2*dt*K32*(T1+2*Tf)+rho_ice*hi*Ci*T2)/(6*dt*K32+rho_ice*hi*Ci) ! (15)

   Ts = (K12*T1-A)/(K12+B) ! (6)

STDERR 'T ',Ts,T1,T2

   Fb = _ZERO_
   if (Tw .le. Tf) then
!     during sub freezing SST conditions all available energy is converted
!     to bottom freezing energy
      Fb = (Tw - Tf)*dz*rho_0*CW/dt
!KB      T = Tf
!KB      STDERR 'do_ice: frazil ice formation', Fb, Tf, T-Tf
   else if (has_ice) then
!     when sea ice is present there is an ocean to sea ice heat flux, see eq. (23)
!     with the linear form described in eq. (15) in "FMS Sea Ice Simulator"
      Fb = Kmelt*(Tw - Tf)
   end if
   Ms = K12*(T1-Ts)-(A+Ts*B) ! (22)
   Mb = Fb - 4*K_ice*(Tf-T2)/hi ! (23)

STDERR 'MsMb ',Ms,Mb


   if (Mb .lt. _ZERO_) then
STDERR 'Q ',E(Tf,S)
      dh2 = Mb*dt/E(Tf,S) ! (24 and 25)
      T2new = (dHib*Tf+h2*T2)/(dHib+h2) ! (26)
   end if

   dHs = -min(Ms*dt/L_ice,hs) ! (27) !KB

   dh1 = -min(max((Ms*dt-L_ice*hs)/E(T1,S),_ZERO_),h1) ! (28) !KB L_ice -> L ?

!KB   dh2 = -min(max((Ms*dt-L_ice*hs+E(T1,S)*h1)/(-E(T2,S)),_ZERO_),h2) ! (28) !KB L_ice -> L ?

STDERR 'dh ',dhs,dh1,dh2

#if 0
!  Convert evaporation from m/s surface ocean water to corresponding
!  evaporation of ice in m/s
!  TODO: How much energy is needed to evaporate sea ice???
!   L = (2.5-0.00234*S)*1.e6
!   evap = evap*L*rho_0
!   evap = evap_ice/(rhoi*heat_evaporation_ice) 
   evap = _ZERO_
!
#endif
stop

end subroutine do_ice_flato

REALTYPE function E(T,S)  ! (25)
! !INPUT PARAMETERS:
   REALTYPE :: T,S
   E = Ci*(T+my*S) - L_ice
   return
end function E

!-----------------------------------------------------------------------
!BOP
!
! !IROUTINE: melting energy
!
! !INTERFACE:
   REALTYPE function melt_energy(hs, h1, t1, h2, t2)
!
! !DESCRIPTION:
!  melt_energy - energy needed to entirely melt a given snow/ice configuration
!
! !USES:
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   REALTYPE, optional, intent(in) :: hs ! snow thickness
   REALTYPE, optional, intent(in) :: h1 ! Upper ice layer thickness (m)
   REALTYPE, optional, intent(in) :: t1 ! Upper ice layer temperature (degC)
   REALTYPE, optional, intent(in) :: h2 ! Lower ice layer thickness (m)
   REALTYPE, optional, intent(in) :: t2 ! Lower ice layer temperature (degC)
!   REALTYPE :: melt_energy ! Amount of melt energy needed (J)
!EOP
!-----------------------------------------------------------------------
!BOC
   melt_energy = _ZERO_

   ! energy needed for melting snow layer
   if (present(hs)) melt_energy = melt_energy+rhos*Li*hs

   ! energy needed for melting upper ice layer
   if (present(h1) .and. present(t1)) then
      melt_energy = melt_energy+rho_ice*h1*(Ci-Li/t1)*(Tfi-t1)
   endif

   ! energy needed for melting lower ice layer
   if (present(h2) .and. present(t2)) then
      melt_energy = melt_energy+rhoi*h2*(Li+Ci*(Tfi-t2))
   endif
   return
   end function melt_energy
!EOC

#if 0

!-----------------------------------------------------------------------
!BOP
!
! !ROUTINE: Calculate ice thermodynamics \label{sec:do_ice_flato}
!
! !INTERFACE:
   subroutine do_thermodynamics(A,B,I,Tf,Fb,precip,dt,hs,hi,T1,T2,evap,tmelt, &
                                bmelt,ts)
!
! !DESCRIPTION:
!  This subroutine updates the sea ice prognostic variables. The updated
!  variables are upper ice layer temperature (T1), lower ice layer temperature
!  (T2), snow thickness (hs), and ice thickness (hi).
!
!  The ice model performs this in two steps. First the temperatures are updated
!  and secondly the changes in ice and snow thickness are calculated.
!
!  Any surplus energy that is not used for melting is returned in tmelt and
!  bmelt.
!
!  Evaporation and bottom ablation formation are not included in
!  this version of the model. Furthermore we do not keep an explicit water
!  and salt budget for the sea ice and how that affects the water and salt
!  budgets in the ocean.
!
! !USES:
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in)      :: A     ! net surface heat flux (+ up) at ts=0 (W/m^2)
   REALTYPE, intent(in)      :: B     ! d(sfc heat flux)/d(ts) [W/(m^2 deg-C)]
   REALTYPE, intent(in)      :: I     ! solar absorbed by upper ice (W/m^2)
   REALTYPE, intent(in)      :: Tf    ! seawater freezing temperature (deg-C)
   REALTYPE, intent(in)      :: Fb    ! heat flux from ocean to ice bottom (W/m^2)
   REALTYPE, intent(in)      :: precip! freshwater precipitatin (m/s)
   REALTYPE, intent(in)      :: dt    ! timestep (sec)
! !INPUT/OUTPUT PARAMETERS:
   REALTYPE, intent(inout)   :: hs    ! snow thickness (m)
   REALTYPE, intent(inout)   :: hi    ! ice thickness (m)
   REALTYPE, intent(inout)   :: T1    ! upper ice temperature (deg-C)
   REALTYPE, intent(inout)   :: T2    ! lower ice temperature (deg-C)
   REALTYPE, intent(inout)   :: evap  ! evaporation of ice (m/s)
! !OUTPUT PARAMETERS:
   REALTYPE, intent(out)     :: tmelt ! accumulated top melting energy  (J/m^2)
   REALTYPE, intent(out)     :: bmelt ! accumulated bottom melting energy (J/m^2)
   REALTYPE, intent(out)     :: ts    ! surface temperature (deg-C)
!
! !LOCAL VARIABLES:
   REALTYPE        :: tsf
   REALTYPE        :: K12,K32
   REALTYPE        :: hi2, hie
   REALTYPE        :: A10, B10, A1, B1, C1
   REALTYPE        :: h1, h2
   REALTYPE        :: dh
   REALTYPE        :: f1
   REALTYPE        :: hw
   REALTYPE        :: snow
   REALTYPE        :: snow_to_ice
!EOP
!-----------------------------------------------------------------------
!BOC
   LEVEL0 'do_thermodynamics'
!
!  initialize surface temperature to zero (just to avoid strange output)
   ts = _ZERO_
!
!  initialize accumulated top and bottom melting energies
   tmelt = _ZERO_
   bmelt = _ZERO_
!
!  prevent thin ice inaccuracy (mw)
   hie = max(hi, H_LO_LIM);
!
!  temperature update is only performed when there is ice
   if (hi > _ZERO_) then
      STDERR 'do_thermodynamics: sea ice is present:', hi
!
!     set surface temperature to snow temperature or seawater freezing temp.
!     TODO: refactor into a sub called update_T1_and_ts(hs, hie, dt, T1, T2)
      if (hs > _ZERO_) then
         tsf = _ZERO_
      else
         tsf = Tfi
      endif
!
!     compute upper ice and surface temperatures
!KB      K12 = 4*Ki*Ks/(Ks+4*Ki*hs/hie) ! (5)
      K12 = 4*Ki*Ks/(Ks*hie+4*Ki*hs) ! (5)
      K32 = 2*Ki/hi
      hi2 = hie*hie
!
      A10 = rhoi*hi2*Ci/(2*dt) + 2*Ki*(4*dt*2*Ki+rhoi*hi2*Ci)/(6*dt*2*Ki+rhoi*hi2*Ci)
      B10 = -rhoi*hi2*(Ci*T1+Li*Tfi/T1)/(2*dt) - I*hie                       &
            -2*Ki*(4*dt*2*Ki*Tf+rhoi*hi2*Ci*T2)/(6*dt*2*Ki+rhoi*hi2*Ci)
!
      A1 = A10+K12*B*hie/(K12+B*hie)
      B1 = B10+A*K12*hie/(K12+B*hie)
      C1 = rhoi*hi2*Li*Tfi/(2*dt)
      T1 = -(sqrt(B1*B1-4*A1*C1)+B1)/(2*A1)
      ts = (K12*T1-A*hie)/(K12+B*hie)
!
!     check if the snow (if present) or upper layer ice is melting
!     if this is the case the temperatures are recalculted using modified
!     A1 and B1 coefficients (see eqs. (19) - (20))
      if (ts > tsf) then
         A1 = A10+K12
         B1 = B10-K12*tsf
         T1 = -(sqrt(B1*B1-4*A1*C1)+B1)/(2*A1)
         ts = tsf
!        we will now save the surplus energy which we will use below for
!        melting ice from above, see also eq. (22)
         tmelt = tmelt + (K12*(T1-ts)/hi-(A+B*ts))*dt
      endif
!
!     update lower ice temperature we perform the update using temperature
!     deviations from Tf for better thin ice precision
!     TODO: refactor into a sub called update_T2(hs, hie, dt, T1, T2)
!     convert to temperature deviations for better thin ice precision
      T1 = T1-Tf;
      T2 = T2-Tf;
!     perform lower ice temperature update, see eq. (15)
      T2 = (2*dt*2*Ki*T1+rhoi*hi2*Ci*T2)/(6*dt*2*Ki+rhoi*hi2*Ci)
!     convert to real temperatures again
      T1 = T1+Tf;
      T2 = T2+Tf;
!
!     calculate energy flux for bottom melting or freezing according to
!     eq. (23). The oceanic heat flux to the ice bottom is expected
!     to be calculated by the ocean model and passed in as Fb
      bmelt = bmelt + (Fb+4*Ki*(T2-Tf)/hie)*dt
!
!     the temperature update can lead to a situation where the sea ice
!     temperatures end above the freezing temperature. In this case use
!     the excess energy to melt ice
!     put excess lower ice energy into bmelt
      if (t2 > Tfi) then
         bmelt = bmelt + melt_energy(h2=hie/2,t2=Tfi) - melt_energy(h2=hie/2,t2=T2)
         T2 = Tfi
      endif
!
!     put excess upper ice energy into tmelt
      if (T1 > Tfi) then
         tmelt = tmelt + melt_energy(h1=hie/2,t1=Tfi) - melt_energy(h1=hie/2,t1=T1)
         T1 = Tfi
      endif
!
!     temperature update complete - check consistency
!KB      call ice_consistency(ts, hs, hi, T1, T2, bmelt, tmelt)
   endif
!
!  update snow and sea ice thicknesses and accompanying temperature updates
   h1 = hi/2
   h2 = h1
!
!  calculate snow rate [m/s] and add it to snow height
   snow = precip*DFW/rhos
   hs = hs + snow*dt
!
!  apply freezing
   if (hi <= _ZERO_ .and. Fb < _ZERO_) then
      LEVEL0 'ice_flato: frazil ice formation', Fb, bmelt
      bmelt = bmelt + Fb*dt
      T1 = Tf
      T2 = Tf
   endif
!
!  Apply freezing
   if (bmelt < _ZERO_) then
      call add_to_bot(-bmelt/melt_energy(h2=_ONE_,t2=Tf), &
                     & Tf, h2, T2)
      bmelt = _ZERO_
   endif
!
!  apply atmospheric evaporation
   if (evap <= hs*rhos) then
      hs = hs - evap/rhos
   else if (evap-hs*rhos<=h1*rhoi) then
      hs = _ZERO_
      h1 = h1 - (evap-rhos*hs)/rhoi
   else if (evap-hs*rhos-h1*rhoi<=h2*rhoi) then
      hs = _ZERO_
      h1 = _ZERO_
      h2 = h2 - (evap-hs*rhos-h1*rhoi)/rhoi
   else
      hs = _ZERO_
      h1 = _ZERO_
      h2 = _ZERO_
   end if
!
!  in sea ice the temperatures (T1 and T2) are always < 0. But in the case
!  where we have no sea ice (h1 == 0) we still divide by T1. We therefore
!  set it to the sea water freezing temperature in this case
   if (h1 == _ZERO_) T1 = Tf
!
!  apply energy fluxes at top
!  TODO: refactor into a sub called apply_surface_flux(hs, h1, h2, tmelt, T1, T2)
   if (tmelt <= melt_energy(hs=hs)) then
!     only melting snow layer
      hs = hs - tmelt/melt_energy(hs=_ONE_)
      tmelt = _ZERO_
   else if (tmelt <= melt_energy(hs,h1,T1)) then
!     melting snow layer and part of top ice layer
      h1 = h1 - (tmelt-melt_energy(hs))/melt_energy(h1=_ONE_,t1=T1)
      hs = _ZERO_
      tmelt = _ZERO_
   else if (tmelt <= melt_energy(hs,h1,T1,h2,T2)) then
!     melting snow layer, top ice layer and part of bottom ice layer
      h2 = h2 - (tmelt - melt_energy(hs,h1,T1))/melt_energy(h2=_ONE_,t2=T2)
      hs = _ZERO_
      h1 = _ZERO_
      tmelt = _ZERO_
   else
!     melting all layers
      hs = _ZERO_
      h1 = _ZERO_
      h2 = _ZERO_
      tmelt = tmelt - melt_energy(hs,h1,T1,h2,T2)
   endif
!
!  apply energy fluxes at bottom
!  TODO: refactor into a sub called apply_bottom_flux(hs, h1, h2, tmelt, T1, T2)
   if (bmelt > _ZERO_) then
      if (bmelt < melt_energy(h2=h2,t2=T2)) then
!        only melting part of bottom ice layer
         h2 = h2 - bmelt/melt_energy(h2=_ONE_,t2=T2)
         bmelt = _ZERO_
      else if (bmelt < melt_energy(h1=h1,t1=T1,h2=h2,t2=T2)) then
!        melting bottom ice layer and part of top ice layer
         h1 = h1-(bmelt-melt_energy(h2=h2,t2=T2))/melt_energy(h1=_ONE_,t1=T1)
         h2 = _ZERO_
         bmelt = _ZERO_
      else if (bmelt < melt_energy(hs,h1,T1,h2,T2)) then
!        melting bottom and top ice layers and part of snow layer
         hs = hs - (bmelt-melt_energy(h1=h1,t1=T1,h2=h2,t2=T2)) &
            & / melt_energy(hs=_ONE_)
         h1 = _ZERO_
         h2 = _ZERO_
         bmelt = _ZERO_
      else
!        melting all layers
         hs = _ZERO_
         h1 = _ZERO_
         h2 = _ZERO_
         bmelt = bmelt - melt_energy(hs,h1,T1,h2,T2)
      endif
   endif
!
!  calculate updated sea ice thickness
   hi = h1 + h2
!
!  determine the water line by taking the mass (per unit square)
!  of the snow and ice and dividing it by the density of seawater.
   hw = (rhoi*hi+rhos*hs)/DW
!
!  convert snow to ice to maintain ice at waterline
   if (hw > hi) then
      snow_to_ice = (hw-hi)*rhoi
      hs = hs - snow_to_ice/rhos
!     the snow is added to the top ice layer preserving enthalpy
!     T1 is therefore also changed during the consersion, see eq. (38).
      call add_to_top(hw-hi, Tfi, h1, T1)
   endif
!
!  Even up layer thicknesses and t2 according to eq. (40)
   call even_up(h1, T1, h2, T2)
   hi = h1 + h2
!
!  FIXME: Karsten, is this comparison really safe? I would have used:
!  if (hi <= _ZERO_) then ! and possibly added hi = _ZERO_ in the if block
   if (hi == _ZERO_) then
      T1 = _ZERO_
      T2 = _ZERO_
   endif
!
!  postconditions
!KB   call ice_consistency(ts, hs, hi, T1, T2, bmelt, tmelt)

   LEVEL0 'end do_thermodynamics'
   return
   end subroutine do_thermodynamics
!EOC

!-----------------------------------------------------------------------
!BOP
!
! !IROUTINE: ice_consistency
! !INTERFACE:
   subroutine ice_consistency(ts, hs, hi, t1, t2, bmelt, tmelt)
!
! !DESCRIPTION:
!  ice_consistency - checks that the sea ice fields look ok
!
! !USES:
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in) :: ts ! surface temperature
   REALTYPE, intent(in) :: hs ! snow thickness
   REALTYPE, intent(in) :: hi ! ice layer thickness (m)
   REALTYPE, intent(in) :: t1 ! Upper ice layer temperature (degC)
   REALTYPE, intent(in) :: t2 ! Lower ice layer temperature (degC)
   REALTYPE, intent(in) :: bmelt ! accumulated bottom melting energy (J/m^2)
   REALTYPE, intent(in) :: tmelt ! accumulated top melting energy  (J/m^2)
!EOP
!-----------------------------------------------------------------------
!BOC
   if (ts>_ZERO_ .or. t1>Tfi .or. t2>_ZERO_ .or. hs<_ZERO_ .or. hs>100.0 &
     & .or. hi<_ZERO_ .or. hi>100.0 .or. abs(bmelt)>100.0*rhoi*Li &
     & .or. tmelt<_ZERO_ .or. tmelt>100.0*rhoi*Li) then
      FATAL 'UNREASONABLE ICE: hs=',hs,'hi=',hi,'t1=',t1,'t2=',t2,'ts=', &
     &        ts,'tmelt=',tmelt,'bmelt=',bmelt
      stop 'ice_consistency'
   end if
end subroutine ice_consistency
!EOC

!-----------------------------------------------------------------------
!BOP
!
! !IROUTINE: Calculate albedo, penetrating solar and transmissivity
!
! !INTERFACE
   subroutine ice_optics(alb, pen, trn, hs, hi, ts, Tf)
!
! !DESCRIPTION:
!  ice_optics - set albedo, penetrating solar, and ice/snow transmissivity
!
! !USES:
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in)      :: hs  ! snow thickness (m-snow)
   REALTYPE, intent(in)      :: hi  ! ice thickness (m-ice)
   REALTYPE, intent(in)      :: ts  ! surface temperature
   REALTYPE, intent(in)      :: Tf  ! seawater freezing temperature
!
! !OUTPUT PARAMETERS:
   REALTYPE, intent(out)     :: alb ! ice surface albedo (0-1)
   REALTYPE, intent(out)     :: pen ! fraction of down solar penetrating the ice
   REALTYPE, intent(out)     :: trn ! ratio of down solar at bottom to top of ice
!
! !LOCAL VARIABLES:
   REALTYPE        :: as, ai, cs, fh
!EOP
!-----------------------------------------------------------------------
!BOC
   as = ALB_SNO
   ai = ALB_ICE
!
!  determine how large a fraction of the sea ice is covered by snow
   cs = hs/(hs+0.02)
!
!  reduce albedo for thin ice using the same form as in
!  Community Sea Ice Model (CSIM4)
   fh = min(atan(5.0*hi)/atan(5.0*0.5),_ONE_)
!
!  reduce albedo for melting as in CSIM4 assuming 0.53/0.47 vis/ir
   if (ts+T_RANGE_MELT > Tfi) then
      as = as-0.1235*min((ts+T_RANGE_MELT-Tfi)/T_RANGE_MELT,_ONE_)
      ai = ai-0.075 *min((ts+T_RANGE_MELT-Tfi)/T_RANGE_MELT,_ONE_)
   endif
!  reduce albedo for thin ice
   ai = fh*ai+(1-fh)*0.06
!
!  calculate output values
   alb = cs*as+(1-cs)*ai
   pen = (1-cs)*PEN_ICE
   trn = exp(-hi/OPT_DEP_ICE);
   return
   end subroutine ice_optics
!EOC

!------------------------------------------------------------------------------!
!BOP
!
! !IROUTINE: Add sea ice to top layer
!
! !INTERFACE:
   subroutine add_to_top(h, t, h1, t1)
   IMPLICIT NONE
!
! !DESCRIPTION:
! This subroutine adds sea ice to the top layer. It calculates the new
! temperature of the top layer according to eq. (30) in:
!
! Michael Winton flato (2001): FMS Sea Ice Simulator
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in   ) :: h ! amount to add to top ice layer
   REALTYPE, intent(in   ) :: t ! temperature of added ice
!
! !INPUT/OUTPUT PARAMETERS:
   REALTYPE, intent(inout) :: h1 ! top layer thickness
   REALTYPE, intent(inout) :: t1 ! top layer temperature
!
! !LOCAL VARIABLES:
   REALTYPE        :: f1
!EOP
!-----------------------------------------------------------------------
   f1 = h1/(h1+h)
   t1 = f1*(t1+Li*Tfi/(Ci*t1))+(1-f1)*t
   t1 = (t1-sqrt(t1*t1-4*Tfi*Li/Ci))/2
   h1 = h1+h
   return
   end subroutine add_to_top
!EOC

!------------------------------------------------------------------------------!
!BOP
!
! !IROUTINE: Add sea ice to bottom layer
!
! !INTERFACE:
   subroutine add_to_bot(h, t, h2, t2)
!
! !DESCRIPTION:
! This subroutine adds sea ice to the bottom layer. It calculates the new
! temperature of the top layer according to eq. (32) in:
!
! Michael Winton flato (2001): FMS Sea Ice Simulator
!
! !INPUT PARAMETERS:
   REALTYPE, intent(in)      :: h ! amount to add to bottom ice layer
   REALTYPE, intent(in)      :: t ! temperature of added ice
! !INPUT/OUTPUT PARAMETERS:
   REALTYPE, intent(inout)   :: h2 ! bottom layer thickness
   REALTYPE, intent(inout)   :: t2 ! bottom layer temperature
!EOP
!------------------------------------------------------------------------------!
   t2 = (h2*t2+h*t)/(h2+h)
   h2 = h2+h
   return
   end subroutine add_to_bot
!EOC

!------------------------------------------------------------------------------!
!BOP
!
! !IROUTINE: Even up the ice layers
!
! !INTERFACE:
   subroutine even_up(h1, t1, h2, t2)
!
! !DESCRIPTION:
! The sea ice model uses two ice layers internally. But they are assumed to have
! the same thickness allowing us to represent them with a single prognostic
! variable. This subroutine transfers mass and energy from the thicker layer to
! the thinner layer to maintain equal thickness.
!
! !INPUT/OUTPUT PARAMETERS:
   REALTYPE, intent(inout)   :: h1, t1, h2, t2
!
! !LOCAL VARIABLES:
   REALTYPE        :: dh
!EOP
!------------------------------------------------------------------------------!
!BOC
   if (h1 > (h1+h2)/2) then
      call add_to_bot(h1-(h1+h2)/2, t1+Li*Tfi/(Ci*t1), h2, t2)
      h1 = h2
   else if (h2 > (h1+h2)/2) then
      call add_to_top(h2-(h1+h2)/2, t2, h1, t1)
      h2 = h1
   endif
   if (t2>Tfi) then
      ! use extra energy to melt both layers evenly
      dh = h2*Ci*(t2-Tfi)*t1/(Li*t1+(Ci*t1-Li)*(Tfi-t1))
      t2 = Tfi
      h1 = h1-dh
      h2 = h2-dh
   endif
   return
   end subroutine even_up
!EOC
#endif

!-----------------------------------------------------------------------

   end module ice_flato

!-----------------------------------------------------------------------
! Copyright by the GETM-team under the GNU Public License - www.gnu.org
!-----------------------------------------------------------------------
